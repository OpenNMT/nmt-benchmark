extends layout
include mixin.user.pug

mixin field (f)
  - var required = ''
  if mode === 'create' && f.required
    - required = 'required'
  .inline.field(class=required)
    label.large= __(f.label)
    if f.type === 'user'
      input(type='hidden' name='user' value=uData.githubId || uData.id)
      +user(uData)
    else
      if mode === 'view'
        span(id=f.name) #{tsData[f.name]}
      else
        .ui.input
          input(name=f.name placeholder=f.placeholder)

mixin language (label, name, side)
  - var required = ''
  if mode === 'create'
    - required = 'required'
  .inline.field(class=required)
    label.large #{label}
    if mode === 'view'
      span #{tsData[name]} - #{c2l[tsData[name]]}
    else
      .ui.selection.dropdown
        //- mess
        if side === 'src'
          .text #{c2l[src]}
          input(type='hidden' name=name value=src)
        else
          .text #{c2l[tgt]}
          input(type='hidden' name=name value=tgt)
        i.dropdown.icon
        .menu
          if side === 'src'
            for lang in allSrc
              if lang === src
                .item.active(data-value=lang) #{c2l[lang]}
              else
                .item(data-value=lang) #{c2l[lang]}
          else
            for lang in allTgt
              if lang === tgt
                .item.active(data-value=lang) #{c2l[lang]}
              else
                .item(data-value=lang) #{c2l[lang]}

mixin textarea (f)
  - var required = ''
  if mode === 'create' && f.required
    - required = 'required'
  .inline.field.special(class=required)
    label.large= __(f.label)
    if mode === 'view'
      span #{tsData[f.name]}
    else
      textarea(name=f.name placeholder=f.placeholder value=tsData[f.name]) #{tsData[f.name]}

mixin testSet (ts)
  - var to
  for output in toData
    if output.fileId === ts._id
      - to = output
  .ui.raised.centered.fluid.card(style='width: 450px;')
    .content
      if ts.primary
        .ui.right.blue.corner.label(style='border-color: #00B7FF !important')
          i.star.icon
      .header(style='display: flex; justify-content: space-between; align-items: center')
        | #{ts.source.fileName}
      .description
        ul
          li Domain: #{ts.domain}
          li Origin: #{ts.origin}
          if to
            li File: #{to.fileName}
              if to && visitor && visitor.id === uData.githubId
                i.trash.icon.fireBrick.deleteOutput(data-testOutputId=to._id role='button' tabindex='0' aria-label='Delete translation output')
            li Date: #{to.date.toLocaleDateString()}
            if to.scores
              li Score: #{to.scores.BLEU}
      .getSource.ui.basic.fireBrick.button(data-fileId=ts._id role='button' tabindex='0' aria-label='Download source file')
        i.download.icon
        | Get source
    if !to && visitor && visitor.id === uData.githubId
      .extra.content
        .header(style='margin-bottom: 10px; margin-top: 5px;')
          | Translation
        form(action='/testOutput/upload' enctype='multipart/form-data' method='post')
          .selectOutput.ui.icon.input(data-fileId=ts._id)
            input.fileName
            i.folder.open.icon
          .uploadOutput.ui.icon.disabled.button(data-fileId=ts._id role='button' tabindex='0' aria-label='Upload translation output')
            i.upload.icon
            | Upload
          input(type='file' name='file' style='display: none' data-fileId=ts._id)
          input(type='hidden' name='fileId' value=ts._id)
          input(type='hidden' name='systemId' value=systemId)

mixin radio (f)
  - var required = ''
  if mode === 'create' && f.required
    - required = 'required'
  .inline.field(class=required)
    label.large= __(f.label)
    if mode === 'view'
      span #{tsData[f.name] ? 'On' : 'Off'}
    else
      .ui.toggle.checkbox
        input.hidden(type='checkbox' name=f.name checked='checked')
        label On

mixin hidden (f)
  - var required = f.className
  if mode === 'create' && f.required
    - required = 'required ' + f.className
  .inline.field(style='display: none;' class=required)
    label.large= __(f.label)
    if mode === 'view'
      span #{tsData[f.name]}
    else
      .ui.input
        input(name=f.name placeholder=f.placeholder)

mixin dropdown (f)
  - var required = ''
  if mode === 'create' && f.required
    - required = 'required'
  .inline.field(class=required)
    label.large= __(f.label)
    if mode === 'view'
      span #{tsData[f.name]}
    else
      .ui.selection.dropdown
        .text #{f.values[0]}
        input(name=f.name type='hidden' value=f.values[0])
        i.dropdown.icon
        .menu
          each element, i in f.values
            if i === 0
              .item.active(data-value=element) #{element}
            else
              .item(data-value=element) #{element}

mixin render (field)
  case field.type
    when 'user'
      +field(field)
    when 'textarea'
      +textarea(field)
    when 'dropdown'
      +dropdown(field)
    when 'language'
      if field.name === 'sourceLanguage'
        +language(__(field.label), field.name, 'src')
      else
        +language(__(field.label), field.name, 'tgt')
    when 'text/hidden'
      +hidden(field)
    when 'radio'
      +radio(field)
    default
      +field(field)

block modal
  include modal

block content
  .ui.grid.container
    .first.row
      h1
        if mode === 'create'
          span= __('Add translation system')
        if mode === 'view'
          span= __('System description')
    .row
      #translationSystem.ui.small.form
        .ui.three.column.stackable.grid
          .row
            .column
              for field in fieldSet
                if field.layer === 1
                  +render(field)
            .column
              for field in fieldSet
                if field.layer === 2
                  +render(field)
            .column
              for field in fieldSet
                if field.layer === 3
                  +render(field)
          .row
            .fifteen.wide.column
              for field in fieldSet
                if field.layer === 0
                  +render(field)
          if mode === 'create'
            .last.row
              .fifteen.wide.column
                #createSystem.ui.disabled.button(role='button' tabindex='0' aria-label='Create translation system')
                  i.plus.icon
                  span= __('Create')
    if mode === 'view'
      if visitor && visitor.id === uData.githubId
        .row
          #deleteSystem.ui.basic.fireBrick.button(role='button' tabindex='0' aria-label='Delete translation system')
            i.trash.icon
            span= __('Delete this system')
      .row
        h1= __('Test sets')
      .last.row
        .ui.cards
          for ts in testSets
            if ts.source.language === tsData.sourceLanguage && ts.target.language === tsData.targetLanguage
              +testSet(ts)

block scripts
  script.
    var translationSystem = !{JSON.stringify(tsData).replace(/<\//g, '<\\/')}
    var mode = '#{mode}'
  script(src='/javascripts/translationSystem.min.js')
  // TODO - i18n
