extends layout.jade
include mixin.user.jade

mixin field (f)
  .inline.field
    label.large= __(f.label)
    if f.type === 'user'
      input(type='hidden' name='user' value='#{uData.githubId || uData.id}')
      +user(uData)
    else
      if mode === 'view'
        span(id='#{f.name}') #{tsData[f.name]}
      else
        .ui.input
          if mode === 'edit'
            input(name='#{f.name}' value='#{tsData[f.name]}' placeholder='#{f.placeholder}' required='#{f.required}')
          else
            input(name='#{f.name}' placeholder='#{f.placeholder}' required='#{f.required}')

mixin dropdown (label, name, side)
  .inline.field
    label.large #{label}
    if mode === 'view'
      span #{tsData[name]} - #{c2l[tsData[name]]}
    else
      .ui.selection.dropdown
        //- mess
        if side === 'src'
          if mode === 'edit'
            .text #{c2l[tsData[name]]}
          else
            .text #{c2l[src]}
          input(type='hidden' name='#{name}' value='#{src}')
        else
          if mode === 'edit'
            .text #{c2l[tsData[name]]}
          else
            .text #{c2l[tgt]}
          input(type='hidden' name='#{name}' value='#{tgt}')
        i.dropdown.icon
        .menu
          if side === 'src'
            for lang in allSrc
              if lang === src
                .item.active(data-value='#{lang}') #{c2l[lang]}
              else
                .item(data-value='#{lang}') #{c2l[lang]}
          else
            for lang in allTgt
              if lang === tgt
                .item.active(data-value='#{lang}') #{c2l[lang]}
              else
                .item(data-value='#{lang}') #{c2l[lang]}

mixin textarea (f)
  .inline.field.special
    label.large= __(f.label)
    if mode === 'view'
      span #{tsData[name]}
    else
      textarea(name='#{f.name}' placeholder='#{f.placeholder}' value='#{tsData[name]}' required='#{f.required}') #{tsData[name]}

mixin testSet (ts)
  - var to
  for output in toData
    if output.fileId == ts._id
      - to = output
  .ui.raised.centered.fluid.card(style='width: 450px;')
    .content
      if ts.primary
        .ui.right.blue.corner.label(style='border-color: #00B7FF !important')
          i.star.icon
      .header(style='display: flex; justify-content: space-between; align-items: center')
        | #{ts.source.fileName}
      .description
        ul
          //- Size...
          li Domain: #{ts.domain}
          li Origin: #{ts.origin}
          if to
            li File: #{to.fileName}
              if to && visitor && visitor.id == uData.githubId
                i.trash.icon.fireBrick.deleteOutput(data-testOutputId='#{to._id}')
            li Date: #{to.date.toLocaleDateString()}
            if to.scores
              li Score: #{to.scores.BLEU}
      #getSource.ui.basic.fireBrick.button(data-fileId='#{ts._id}')
        i.download.icon
        | Get source
    if !to && visitor && visitor.id == uData.githubId
      .extra.content
        .header(style='margin-bottom: 10px; margin-top: 5px;')
          | Translation
        form(action='/testOutput/upload' enctype='multipart/form-data' method='post')
          .selectOutput.ui.icon.input(data-fileId='#{ts._id}')
            input.fileName
            i.folder.open.icon
          .uploadOutput.ui.icon.basic.fireBrick.disabled.button(data-fileId='#{ts._id}')
            i.upload.icon
            | Upload
          input(type='file' name='file' style='display: none' data-fileId='#{ts._id}')
          input(type='hidden' name='fileId' value='#{ts._id}')
          input(type='hidden' name='systemId' value='#{systemId}')

mixin radio (f)
  .inline.field
    label.large= __(f.label)
    if mode == 'view'
      span #{tsData[name] ? 'On' : 'Off'}
    else
      .ui.toggle.checkbox
        input.hidden(type='checkbox' name='#{f.name}' checked='checked')
        label On

mixin hidden (f)
  .inline.field(style='display: none;' class="#{f.className}")
    label.large= __(f.label)
    if mode == 'view'
      span #{tsData[f.name]}
    else
      .ui.input
        input(name='#{f.name}' placeholder="#{f.placeholder}")

mixin set (f)
  .inline.field
    label.large= __(f.label)
    if mode == 'view'
      span #{tsData[f.name]}
    else
      .ui.selection.dropdown
        .text #{f.values[0]}
        input(name='#{f.name}' type='hidden' value='#{f.values[0]}')
        i.dropdown.icon
        .menu
          each element, i in f.values
            if i == 0
              .item.active(data-value='#{element}') #{element}
            else
              .item(data-value='#{element}') #{element}

mixin render (field)
  case field.type
    when 'user'
      +field(field)
    when 'textarea'
      +textarea(field)
    when 'set'
      +set(field)
    when 'dropdown'
      if field.name == 'sourceLanguage'
        +dropdown(__(field.label), field.name, 'src')
      else
        +dropdown(__(field.label), field.name, 'tgt')
    when 'text/hidden'
      +hidden(field)
    when 'radio'
      +radio(field)
    default
      +field(field)

block content
  .information
    h1(style='display: flex; align-items: center')
      if mode === 'create'
        | Add translation system
      if mode === 'view'
        | System description
        span(style='margin-left: 40px')
          if visitor && visitor.id == uData.githubId
            //-i#editSystem.small.grey.write.icon(data-systemId='#{systemId}')
            i#deleteSystem.small.grey.trash.icon(data-systemId='#{systemId}')
      //-
        if mode === 'edit'
          | Edit description
    .ui.small.form
      .ui.three.column.grid
        .row
          .column
            for field in fieldSet
              if field.layer == 1
                +render(field)
          .column
            for field in fieldSet
              if field.layer == 2
                +render(field)
          .column
            for field in fieldSet
              if field.layer == 3
                +render(field)
        .row
          .fifteen.wide.column
            for field in fieldSet
              if field.layer == 0
                +render(field)
        if mode === 'create'
          .row
            .fifteen.wide.column
              #createSystem.ui.basic.fireBrick.button
                i.plus.icon
                span= __('Create')
              .message All fields are required

    if mode === 'view'
      .ui.horizontal.divider= __('Test sets')
      .ui.cards
        for ts in testSets
          if ts.source.language === tsData.sourceLanguage && ts.target.language === tsData.targetLanguage
            +testSet(ts)

block scripts
  script.
    var systemId = '#{systemId}'
    var translationSystem = !{JSON.stringify(tsData).replace(/<\//g, '<\\/')}
    var testOutputs = !{JSON.stringify(toData).replace(/<\//g, '<\\/')}
    var uData = !{JSON.stringify(uData).replace(/<\//g, '<\\/')}
    var mode = '#{mode}'
    var allSrc = !{JSON.stringify(allSrc).replace(/<\//g, '<\\/')}
    var allTgt = !{JSON.stringify(allTgt).replace(/<\//g, '<\\/')}
    var testSets = !{JSON.stringify(testSets).replace(/<\//g, '<\\/')}
    var visitor = !{JSON.stringify(visitor).replace(/<\//g, '<\\/')}
  script(src='/javascripts/translationSystem.js')
  // TODO - i18n
